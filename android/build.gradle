//plugins { id=apply plugin }

apply plugin: 'com.android.application'


/*
package studio.baka.satoripixeldungeon.android;
*/
    configurations.all {
        resolutionStrategy {
            force 'androidx.vectordrawable:vectordrawable-animated:1.1.0' 

android {

namespace "studio.baka.satoripixeldungeon.android"

        
compileSdkVersion appAndroidCompileSDK
    

//    compileSdkVersion appAndroidCompileSDK

    defaultConfig {

        appName = 'Satori\'s Pixel Dungeon'
/*        manifestPlaceholders = [appName:appName]
*/
        applicationId "studio.baka.satoripixeldungeon.android"
/*
appPackageName         
appVersionCode = 383
        appVersionName = '1.7.4'
        gdxVersion = '1.9.10'
appVersionCode
appVersionName
appAndroidTargetSDK
appAndroidMinSDK
        appAndroidMinSDK = 24
*/
        versionCode 383
        versionName '1.7.4'
//version = '1.7.4'
        //noinspection MinSdkTooLow
        minSdkVersion 24
        targetSdkVersion 35
//compileSdkVersion 35

        resConfigs "en_US", "cs", "tr", "ca", "ko", "pl", "it", "ja",
                "eo", "ru", "zh_CN", "de", "fr", "es", "pt", "fi", "hu", "in"
    }
//multiDexEnabled true
    buildTypes {
        debug {

            applicationIdSuffix ".indev"
            versionNameSuffix '-INDEV'

        }
        release {

            //These lines enable R8, which is a code shrinker/optimizer/obfuscator.
            //This makes release APKs smaller and more efficient, but also makes debugging trickier
            //as the information produced in stack traces must be de-obfuscated.
            //See here: https://developer.android.com/studio/build/shrink-code#decode-stack-trace
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_23
//1.8 or JavaVersion.VERSION_23
        targetCompatibility = JavaVersion.VERSION_23
    }
//    buildToolsVersion = '29.0.3'


configurations { natives }

dependencies {
    implementation project(':core')
/*
def multidex_version = "2.0.1"
implementation "androidx.multidex:multidex:2.0.1" // 或最新版本
*/
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.github.RohitSurwase.UCE-Handler:uce_handler:1.4"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
}